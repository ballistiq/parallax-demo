// Generated by CoffeeScript 1.6.3
var rootPath;

if (document.location.hostname === "ballistiq.github.io") {
  rootPath = "/parallax-demo";
} else {
  rootPath = "";
}

$(function() {
  var canvas, context, currentFrame, iOS, loadImageSequence, loadedFrameCallback, offsetBackground, padContent, render, renderCurrentFrame, resizeCanvas, sequence, totalFrames;
  prettyPrint();
  padContent = function() {
    var windowHeight;
    windowHeight = $(window).height();
    return $('.slide-content').each(function() {
      var contentHeight, targetHeight;
      contentHeight = $(this).height();
      targetHeight = (windowHeight - contentHeight) / 2;
      return $(this).css('padding-top', targetHeight);
    });
  };
  padContent();
  $(window).resize(padContent);
  iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
  if (iOS) {
    $('.fixed-technique-slide').css('background-attachment', 'scroll');
  }
  if ($('.offset-technique').length > 0) {
    offsetBackground = function() {
      var distanceFromTop;
      distanceFromTop = $(window).scrollTop();
      return $("div[data-parallax-offset]").each(function() {
        var offset;
        offset = Math.round(-distanceFromTop * 0.2);
        return $(this).css('background-position', "50% " + offset + "px");
      });
    };
    $(window).scroll(function() {
      return offsetBackground();
    });
    $(window).on('touchmove', offsetBackground);
  }
  if ($('#parallax-canvas').length > 0) {
    resizeCanvas = function() {
      var windowHeight, windowWidth;
      windowWidth = $(window).width();
      windowHeight = $(window).height();
      return $('#parallax-canvas').attr('width', windowWidth).attr('height', windowHeight);
    };
    resizeCanvas();
    $(window).resize(resizeCanvas);
    canvas = document.getElementById('parallax-canvas');
    context = canvas.getContext('2d');
    currentFrame = 1;
    totalFrames = 112;
    sequence = [];
    renderCurrentFrame = function() {
      var offset;
      offset = $(window).scrollTop();
      currentFrame = Math.round(offset / 40);
      if (currentFrame >= totalFrames) {
        currentFrame = totalFrames - 1;
      }
      return render(sequence[currentFrame]);
    };
    render = function(img) {
      var h, videoAspectRatio, videoHeight, videoWidth, w, windowAspectRatio, windowHeight, windowWidth, x;
      windowWidth = $(window).width();
      windowHeight = $(window).height();
      windowAspectRatio = windowWidth / windowHeight;
      videoWidth = 1920;
      videoHeight = 1080;
      videoAspectRatio = videoWidth / videoHeight;
      if (windowAspectRatio > videoAspectRatio) {
        w = windowWidth;
        h = windowWidth / videoAspectRatio;
      } else {
        w = videoAspectRatio * windowHeight;
        h = windowHeight;
      }
      x = -(w - windowWidth) / 2;
      return context.drawImage(img, x, 0, w, h);
    };
    loadImageSequence = function() {
      var file, i, img, num, _i;
      sequence = [];
      for (i = _i = 1; 1 <= totalFrames ? _i <= totalFrames : _i >= totalFrames; i = 1 <= totalFrames ? ++_i : --_i) {
        img = new Image();
        num = ("0000" + i).slice(-4);
        file = "" + rootPath + "/sequence/bbb_" + num + ".jpg";
        img.src = file;
        img.frame = i;
        img.onload = function() {
          return loadedFrameCallback(this);
        };
        sequence.push(img);
      }
      return sequence;
    };
    loadedFrameCallback = function(img) {
      if (img.frame === 1) {
        return render(img);
      }
    };
    sequence = loadImageSequence();
    $(window).resize(renderCurrentFrame);
    $(window).scroll(function() {
      return renderCurrentFrame();
    });
    return $(window).on('touchmove', renderCurrentFrame);
  }
});
